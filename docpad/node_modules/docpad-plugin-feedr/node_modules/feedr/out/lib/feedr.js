// Generated by CoffeeScript 1.6.3
(function() {
  var Feedr, TaskGroup, balUtil, eachr, extendr, pathUtil, safefs, safeps, typeChecker,
    __hasProp = {}.hasOwnProperty;

  extendr = require('extendr');

  eachr = require('eachr');

  TaskGroup = require('taskgroup').TaskGroup;

  typeChecker = require('typechecker');

  safefs = require('safefs');

  safeps = require('safeps');

  balUtil = require('bal-util');

  pathUtil = require('path');

  Feedr = (function() {
    Feedr.prototype.config = {
      log: null,
      logError: null,
      tmpPath: null,
      cache: true,
      cacheTime: 5 * 60 * 1000,
      xmljsOptions: null,
      timeout: 10 * 1000
    };

    function Feedr(config) {
      this.config = extendr.extend({}, this.config, config);
      this;
    }

    Feedr.prototype.readFeeds = function(feeds, next) {
      var config, failures, feedr, isArray, log, logError, result, tasks, _ref;
      feedr = this;
      config = this.config;
      _ref = this.config, log = _ref.log, logError = _ref.logError;
      failures = 0;
      isArray = typeChecker.isArray(feeds);
      result = isArray ? [] : {};
      tasks = new TaskGroup().setConfig({
        concurrency: 0
      }).once('complete', function(err) {
        if (typeof log === "function") {
          log((failures ? 'warn' : 'debug'), 'Feedr finished fetching', (failures ? "with " + failures + " failures" : ''));
        }
        return next(err, result);
      });
      eachr(feeds, function(feedDetails, feedName) {
        return tasks.addTask(function(complete) {
          if (typeChecker.isString(feedDetails)) {
            feedDetails = {
              url: feedDetails
            };
          }
          if (feedDetails.name == null) {
            feedDetails.name = feedName;
          }
          return feedr.readFeed(feedDetails, function(err, data) {
            if (err) {
              if (typeof log === "function") {
                log('debug', "Feedr failed to fetch [" + feedDetails.url + "] to [" + feedDetails.path + "]");
              }
              if (typeof logError === "function") {
                logError(err);
              }
              ++failures;
            } else {
              if (isArray) {
                result.push(data);
              } else {
                result[feedName] = data;
              }
            }
            return complete();
          });
        });
      });
      if (config.tmpPath) {
        tasks.run();
      } else {
        safeps.getTmpPath(function(err, tmpPath) {
          if (err) {
            return next(err);
          }
          config.tmpPath = tmpPath;
          return tasks.run();
        });
      }
      return this;
    };

    Feedr.prototype.readFeed = function(feedDetails, next) {
      var cleanData, config, feedr, log, logError, viaCache, viaRequest, writeFeed, _ref;
      feedr = this;
      config = this.config;
      _ref = this.config, log = _ref.log, logError = _ref.logError;
      if (!config.tmpPath) {
        safeps.getTmpPath(function(err, tmpPath) {
          if (err) {
            return next(err);
          }
          config.tmpPath = tmpPath;
          return feedr.readFeed(feedDetails, next);
        });
        return this;
      }
      if (typeChecker.isString(feedDetails)) {
        feedDetails = {
          url: feedDetails,
          name: feedDetails
        };
      }
      if (feedDetails.hash == null) {
        feedDetails.hash = require('crypto').createHash('md5').update("feedr-" + JSON.stringify(feedDetails.url)).digest('hex');
      }
      if (feedDetails.path == null) {
        feedDetails.path = pathUtil.join(config.tmpPath, feedDetails.hash);
      }
      if (feedDetails.name == null) {
        feedDetails.name = feedDetails.hash;
      }
      if (feedDetails.timeout == null) {
        feedDetails.timeout = config.timeout;
      }
      if (feedDetails.cache == null) {
        feedDetails.cache = config.cache;
      }
      if (feedDetails.cacheTime == null) {
        feedDetails.cacheTime = 'auto';
      }
      if (!feedDetails.cacheTime) {
        feedDetails.cacheTime = feedDetails.cache = false;
      }
      if (feedDetails.cacheTime === 'auto') {
        if (feedDetails.url.indexOf('github.com') !== -1) {
          feedDetails.cacheTime = 60 * 60 * 1000;
        } else {
          feedDetails.cacheTime = 'default';
        }
      }
      if (feedDetails.cacheTime === 'default') {
        feedDetails.cacheTime = config.cacheTime;
      }
      if (feedDetails.url.indexOf('github.com') !== -1) {
        feedDetails.checkResult = function(data) {
          var err, _err;
          err = null;
          try {
            data = JSON.parse(data);
            if (data.message) {
              err = new Error(data.message);
            }
          } catch (_error) {
            _err = _error;
          }
          return err;
        };
      }
      cleanData = function(data) {
        var key, keys, value;
        keys = [];
        for (key in data) {
          if (!__hasProp.call(data, key)) continue;
          value = data[key];
          if (typeChecker.isPlainObject(data)) {
            data[key] = cleanData(value);
          }
          keys.push(key);
        }
        if (keys.length === 1 && keys[0] === '_content') {
          data = data._content;
        }
        return data;
      };
      writeFeed = function(data) {
        return safefs.writeFile(feedDetails.path, JSON.stringify(data), function(err) {
          if (err) {
            return next(err);
          }
          return next(null, data);
        });
      };
      viaCache = function() {
        if (typeof log === "function") {
          log('debug', "Feedr fetched [" + feedDetails.url + "] from cache");
        }
        return safefs.exists(feedDetails.path, function(exists) {
          if (!exists) {
            return next();
          }
          return safefs.readFile(feedDetails.path, function(err, dataBuffer) {
            var data;
            if (err) {
              return next(err);
            }
            data = JSON.parse(dataBuffer.toString());
            return next(null, data);
          });
        });
      };
      viaRequest = function() {
        if (typeof log === "function") {
          log('debug', "Feedr is fetching [" + feedDetails.url + "] to [" + feedDetails.path + "]");
        }
        return balUtil.readPath(feedDetails.url, {
          timeout: feedDetails.timeout
        }, function(err, data) {
          var body, handleError, parser, xml2js, xml2jsOptions;
          handleError = function(err) {
            if (feedDetails.cache !== false) {
              return viaCache();
            }
            return next(err);
          };
          if (err == null) {
            err = typeof feedDetails.checkResult === "function" ? feedDetails.checkResult(data) : void 0;
          }
          if (err) {
            return handleError(err);
          }
          body = data.toString().trim();
          if (/^</.test(body)) {
            xml2js = require('xml2js');
            xml2jsOptions = config.xml2jsOptions;
            if (typeChecker.isString(xml2jsOptions)) {
              xml2jsOptions = xml2js.defaults[xml2jsOptions];
            }
            parser = new xml2js.Parser(xml2jsOptions);
            parser.on('end', function(data) {
              return writeFeed(data);
            });
            try {
              return parser.parseString(body);
            } catch (_error) {
              err = _error;
              if (err) {
                return handleError(err);
              }
            }
          } else {
            body = body.replace(/(^([\s\;]|\/\*\*\/)+|[\s\;]+$)/g, '');
            try {
              body = body.replace(/^[a-z0-9]+/gi, '').replace(/^\(|\)$/g, '');
              return data = JSON.parse(body);
            } catch (_error) {
              err = _error;
              try {
                body = body.replace(/\\'/g, "'");
                return data = JSON.parse(body);
              } catch (_error) {
                err = _error;
                if (err) {
                  return handleError(err);
                }
              }
            } finally {
              if (feedDetails.clean) {
                if (typeof log === "function") {
                  log('debug', "Feedr is cleaning data from [" + feedDetails.url + "]");
                }
                data = cleanData(data);
              }
              return writeFeed(data);
            }
          }
        });
      };
      if (feedDetails.cache === false) {
        viaRequest();
      } else {
        balUtil.isPathOlderThan(feedDetails.path, feedDetails.cacheTime, function(err, older) {
          if (err) {
            return next(err);
          }
          if (older === null || older === true) {
            return viaRequest();
          } else {
            return viaCache();
          }
        });
      }
      return this;
    };

    return Feedr;

  })();

  module.exports = {
    Feedr: Feedr
  };

}).call(this);
